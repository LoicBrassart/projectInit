x-baseService: &baseService
  restart: always
  healthcheck:
    interval: 1s
    timeout: 1s
    retries: 3
    start_period: 1s
    start_interval: 1s

services:
  database:
    <<: *baseService
    container_name: database
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USER}"]
    volumes:
      - ./persist/database:/var/lib/postgresql
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_HOST: ${DB_HOST}

  backend:
    <<: *baseService
    container_name: backend
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --request GET --url 'http://backend:${SERVICE_PORT}/api' || exit 1",
        ]
    volumes:
      - ../../backend/src:/app/src/
    depends_on:
      database:
        condition: service_healthy
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_HOST: ${DB_HOST}
      SERVICE_PORT: ${SERVICE_PORT}

  frontend:
    <<: *baseService
    container_name: frontend
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -m 5 --fail --request GET --url 'http://frontend:${SERVICE_PORT}' || exit 1",
        ]
    volumes:
      - ../../frontend/src:/app/src/
    environment:
      CHOKIDAR_USEPOLLING: true # Windows limitation
      VITE_PORT: ${SERVICE_PORT}
      GATEWAY_PORT: ${GATEWAY_PORT}
    depends_on:
      backend:
        condition: service_healthy

  gateway:
    <<: *baseService
    container_name: gateway
    image: nginx
    volumes:
      - ./nginx/:/etc/nginx/templates/
    ports:
      - ${GATEWAY_PORT}:80
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      SERVICE_PORT: ${SERVICE_PORT}
      UPLOAD_SIZE: ${UPLOAD_SIZE}

  adminer:
    <<: *baseService
    container_name: adminer
    image: adminer
    depends_on:
      database:
        condition: service_healthy
    command:
      [
        "php",
        "-d",
        "post_max_size=${UPLOAD_SIZE}",
        "-d",
        "upload_max_filesize=${UPLOAD_SIZE}",
        "-S",
        "0.0.0.0:${SERVICE_PORT}",
        "-t",
        "/var/www/html",
      ]
